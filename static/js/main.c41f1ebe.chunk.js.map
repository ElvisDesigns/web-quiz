{"version":3,"sources":["consts.ts","app/hooks.ts","store/quizReducer.ts","components/Quiz/parts/SingleChoice/SingleChoice.tsx","components/Quiz/parts/MultiChoice/MultiChoice.tsx","components/Quiz/parts/Text/Text.tsx","components/Quiz/Quiz.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["SINGLE_SELECT","MULTI_SELECT","IMAGE_SINGLE_SELECT","IMAGE_MULTI_SELECT","TEXT_FIELD","useAppDispatch","useDispatch","useAppSelector","useSelector","quiz","createSlice","name","initialState","answers","showCorrect","correctPoints","reducers","addAnswer","state","action","payload","clearAnswers","setCorrectPoints","setShowAnswers","getAnswers","getShowAnswers","getPoints","actions","SingleChoice","question","isImage","incompleteAnswers","quizQuestion","description","pts","correctAnswers","storeAnswer","submittedAnswers","points","dispatch","className","clsx","includes","parse","map","answer","idx","id","checked","disabled","onChange","type","htmlFor","src","MultiChoice","currentTarget","filter","e","Text","value","Quiz","data","useState","stateIncompleteAnswers","setIncompleteAnswers","message","setMessage","hasTimerBeenStarted","setHasTimerBeenStarted","useCountDown","timeLeft","start","pause","useEffect","validateQuestion","length","calculatePoints","reduce","acc","ptForAnswer","correctAnswersPts","val","incorrectAnswersPts","totalPoints","gottenPoints","Object","values","pt","validateTest","skipIncomplete","window","scrollTo","Math","floor","declaration","onClick","location","reload","App","startTest","setStartTest","store","configureStore","reducer","quizReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4SAAaA,EAAgB,gBAChBC,EAAe,eACfC,EAAsB,sBACtBC,EAAqB,qBACrBC,EAAa,a,OCAbC,EAAiB,kBAAMC,eACvBC,EAAkDC,I,QCclDC,EAAOC,YAAY,CAC5BC,KAAM,OACNC,aARmC,CACnCC,QAAS,GACTC,aAAa,EACbC,cAAe,IAMfC,SAAU,CACNC,UAAW,SAACC,EAAOC,GACfD,EAAML,QAAN,2BAAqBK,EAAML,SAAYM,EAAOC,UAElDC,aAAc,SAACH,GACXA,EAAML,QAAU,IAEpBS,iBAAkB,SAACJ,EAAOC,GACtBD,EAAMH,cAAgBI,EAAOC,SAEjCG,eAAgB,SAACL,EAAOC,GACpBD,EAAMJ,YAAcK,EAAOC,YAK1BI,EAAa,SAACN,GAAD,OAAsBA,EAAMT,KAAKI,SAC9CY,EAAiB,SAACP,GAAD,OAAsBA,EAAMT,KAAKK,aAClDY,EAAY,SAACR,GAAD,OAAsBA,EAAMT,KAAKM,eAEnD,EAAsEN,EAAKkB,QAAnEV,EAAR,EAAQA,UAAyBM,GAAjC,EAAmBF,aAAnB,EAAiCE,gBAAgBD,EAAjD,EAAiDA,iBAEzCb,IAAf,Q,6BCKemB,EAjC6B,SAAC,GAA4C,IAAD,EAA1CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,kBAE5CC,EAA2EH,EAArFA,SAAP,EAA4FA,EAA7DI,mBAA/B,MAA6C,GAA7C,EAAiDC,EAA2CL,EAA3CK,IAAjD,EAA4FL,EAAtChB,eAAtD,MAAgE,GAAhE,EAAoEF,EAAwBkB,EAAxBlB,KAAMwB,EAAkBN,EAAlBM,eACpEC,EAAW,UAAG7B,EAAeiB,UAAlB,aAAG,EAA6Bb,GAC3C0B,EAAmB9B,EAAekB,GAClCa,EAAS/B,EAAemB,GACxBa,EAAWlC,IAEjB,OACI,sBAAKmC,UAAWC,YAAK,uBAAwBV,EAAkBW,SAAS/B,IAAS,8BAAjF,UACI,qBAAK6B,UAAWC,YAAK,8BAArB,SAAqDT,IACrD,qBAAKQ,UAAWC,YAAK,oBAArB,SAA4CJ,EAAgB,iBAAMC,QAAN,IAAMA,OAAN,EAAMA,EAAS3B,GAAf,YAAwBuB,EAAxB,qBAA0CA,EAA1C,aAC5D,8BAXK,qBAYL,qBAAKM,UAAWC,YAAK,4BAArB,SAAmDE,YAAMV,KACzD,qBAAKO,UAAWC,YAAK,8BAA+BX,GAAW,uCAA/D,SACKjB,EAAkB+B,KAAI,SAACC,EAAgBC,GAAjB,OAEnB,cADA,CACA,OAAKN,UAAWC,YAAK,sBAAuBX,GAAW,8BAA+BO,GAAoBF,EAAeO,SAASI,IAAQ,8BAA+BV,IAAgBU,GAAOT,IAAqBF,EAAeO,SAASI,IAAQ,6BAArP,UACI,uBAAOC,GAAE,UAAKpC,GAAL,OAAYkC,GAAZ,OAAqBC,GACvBnC,KAAMqB,EACNgB,QAASZ,IAAgBU,EACzBG,SAAWZ,EACXa,SAAU,kBAAMX,EAAStB,EAAU,eAAEN,EAAOmC,MAC5CK,KAAK,UACZ,uBACIC,QAAO,UAAKzC,GAAL,OAAYkC,GAAZ,OAAqBC,GADhC,SACwChB,EAAU,qBAC9CU,UAAWC,YAAK,qBAAsBL,IAAgBU,GAAOhB,GAAW,iCACxEuB,IAAKR,IAAYA,gBCc9BS,G,MAzC2B,SAAC,GAA4C,IAAD,EAA1CzB,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,kBAE1CC,EAA2EH,EAArFA,SAAP,EAA4FA,EAA7DI,mBAA/B,MAA6C,GAA7C,EAAiDC,EAA2CL,EAA3CK,IAAjD,EAA4FL,EAAtChB,eAAtD,MAAgE,GAAhE,EAAoEF,EAAwBkB,EAAxBlB,KAAMwB,EAAkBN,EAAlBM,eACpEC,GAAc,UAAA7B,EAAeiB,UAAf,eAA6Bb,KAAqB,GAChE0B,EAAmB9B,EAAekB,GAClCa,EAAS/B,EAAemB,GACxBa,EAAWlC,IAYjB,OACI,sBAAKmC,UAAWC,YAAK,sBAAuBV,EAAkBW,SAAS/B,IAAS,6BAAhF,UACI,qBAAK6B,UAAWC,YAAK,6BAArB,SAAoDT,IACpD,qBAAKQ,UAAWC,YAAK,mBAArB,SAA2CJ,EAAgB,iBAAMC,QAAN,IAAMA,OAAN,EAAMA,EAAS3B,GAAf,YAAwBuB,EAAxB,qBAA0CA,EAA1C,aAC3D,8BArBK,kCAsBL,qBAAKM,UAAWC,YAAK,2BAArB,SAAkDE,YAAMV,KACxD,qBAAKO,UAAWC,YAAK,6BAA8BX,GAAW,sCAA9D,SACKjB,EAAkB+B,KAAI,SAACC,EAAgBC,GAAjB,OAEnB,cADA,CACA,OAAKN,UAAWC,YAAK,qBAAsBX,GAAW,6BAA8BO,GAAoBF,EAAeO,SAASI,IAAQ,8BAA+BV,EAAYM,SAASI,IAAQT,IAAqBF,EAAeO,SAASI,IAAQ,6BAAzP,UAAuR,uBAAOC,GAAE,UAAKpC,GAAL,OAAYkC,GAAZ,OAAqBC,GAClQnC,KAAMqB,EACNgB,QAASZ,EAAYM,SAASI,GACWG,SAAUZ,EACnDa,SAAU,gBAAkBF,EAAlB,EAAEO,cAAgBP,QAAlB,OAvB5D,SAACrC,EAAcmC,EAAaE,GAErCT,EAAStB,EADT+B,EACmB,eAAErC,EAAH,sBAAcyB,GAAd,CAA2BU,KAE1B,eACdnC,EAAOyB,EAAYoB,QAAO,SAAAC,GAAC,OAAIA,IAAMX,QAkB2DI,CAASvC,EAAMmC,EAAKE,IAC9DG,KAAK,aAAY,uBAChEC,QAAO,UAAKzC,GAAL,OAAYkC,GAAZ,OAAqBC,GADoC,SAC5BhB,EAAU,qBAC9CU,UAAWC,YAAK,oBAAqBL,EAAYM,SAASI,IAAQhB,GAAW,gCAC7EuB,IAAKR,IAAYA,iBCd1Ba,G,MAtBa,SAAC,GAAmC,IAAD,EAAjC7B,EAAiC,EAAjCA,SAAUE,EAAuB,EAAvBA,kBAEnBC,EAA6DH,EAAvEA,SAAP,EAA8EA,EAA/CI,mBAA/B,MAA6C,GAA7C,EAAiDC,EAA6BL,EAA7BK,IAAKvB,EAAwBkB,EAAxBlB,KAAMwB,EAAkBN,EAAlBM,eACtDC,GAAc,UAAA7B,EAAeiB,UAAf,eAA6Bb,KAAmB,GAC9D0B,EAAmB9B,EAAekB,GAClCa,EAAS/B,EAAemB,GACxBa,EAAWlC,IAEjB,OACI,sBAAKmC,UAAWC,YAAK,eAAgBV,EAAkBW,SAAS/B,IAAS,sBAAzE,UACI,qBAAK6B,UAAWC,YAAK,sBAArB,SAA6CT,IAC7C,qBAAKQ,UAAWC,YAAK,YAArB,SAAoCJ,EAAgB,iBAAMC,QAAN,IAAMA,OAAN,EAAMA,EAAS3B,GAAf,YAAwBuB,EAAxB,qBAA0CA,EAA1C,aACpD,8BAXK,sBAYL,qBAAKM,UAAWC,YAAK,oBAArB,SAA2CE,YAAMV,KAEjD,qBAAKO,UAAWC,YAAK,sBAAwBN,EAAeO,SAASN,IAAgBC,EAAmB,8BAAgC,6BAAxI,SACI,uBAAOc,KAAK,OAAOQ,MAAOvB,EAAaa,SAAUZ,EAAkBa,SAAU,gBAAoBS,EAApB,EAAGJ,cAAiBI,MAApB,OAAkCpB,EAAStB,EAAU,eAAEN,EAAOgD,e,QCsH5IC,G,MA/Ha,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAC1B,EAAuDC,mBAAmB,IAA1E,mBAAOC,EAAP,KAA+BC,EAA/B,KACA,EAA8BF,mBAAiB,IAA/C,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsDJ,oBAAkB,GAAxE,mBAAOK,EAAP,KAA4BC,EAA5B,KAKA,EAAmCC,YAHf,IACH,KAEjB,mBAAOC,EAAP,YAAkBC,EAAlB,EAAkBA,MAAOC,EAAzB,EAAyBA,MAEzBC,qBAAU,WACNF,MAED,IAEH,IAUMnC,EAAc7B,EAAeiB,GAC7Be,EAAWlC,IAEXqE,EAAmB,SAAC7C,GAAqC,IAAD,EACnDsB,EAActB,EAAdsB,KAAMxC,EAAQkB,EAARlB,KAEb,QAAKwC,IAASnD,GAAiBmD,IAASjD,KAAoC,OAAXkC,QAAW,IAAXA,OAAA,EAAAA,EAAczB,KAAiC,KAAb,OAAXyB,QAAW,IAAXA,OAAA,EAAAA,EAAczB,SAIjGwC,IAASlD,GAAgBkD,IAAShD,KAAnC,OAA0DiC,QAA1D,IAA0DA,OAA1D,EAA0DA,EAAczB,OAAxE,OAAkFyB,QAAlF,IAAkFA,GAAlF,UAAkFA,EAAczB,UAAhG,aAAiF,EAA6BgE,YAIxGxB,IAAS/C,KAAT,OAAuBgC,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAczB,OAG7CiE,EAAkB,kBACpBf,EAAKgB,QAAO,SAACC,EAAUjD,GACnB,IAAOsB,EAAuCtB,EAAvCsB,KAAMhB,EAAiCN,EAAjCM,eAAb,EAA8CN,EAAjBK,WAA7B,MAAmC,EAAnC,EAAsCvB,EAAQkB,EAARlB,KACtC,GAAKwC,IAASnD,GAAiBmD,IAASjD,EAEpC,OAAO,2BAAI4E,GAAX,kBAAiBnE,EAAOwB,EAAeO,SAAf,OAAwBN,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAczB,IAASuB,EAAM,IAGjF,GAAKiB,IAASlD,GAAgBkD,IAAShD,EAAqB,CACxD,IAAM4E,EAAc7C,EAAMC,EAAewC,OACnCK,IAAgC,OAAX5C,QAAW,IAAXA,OAAA,EAAAA,EAAczB,KAAe,IAAIkE,QAAO,SAACC,EAAKG,GAAN,OAAc9C,EAAeO,SAASuC,GAAOH,EAAMC,EAAcD,IAAK,GACnII,IAAkC,OAAX9C,QAAW,IAAXA,OAAA,EAAAA,EAAczB,KAAe,IAAIkE,QAAO,SAACC,EAAKG,GAAN,OAAe9C,EAAeO,SAASuC,GAA2BH,EAApBA,EAAMC,IAAmB,GAE5I,OAAO,2BAAID,GAAX,kBAAiBnE,EAAOqE,EAAoBE,IAGhD,OAAI/B,IAAS/C,EAEF,2BAAI0E,GAAX,kBAAiBnE,EAAOwB,EAAeO,SAAf,OAAwBN,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAczB,IAASuB,EAAM,IAE1E4C,IACR,KAEDK,EAAc,kBAAMtB,EAAKgB,QAAO,SAACC,EAAD,WAAO5C,IAAP,OAAoB4C,QAApB,MAAa,EAAb,KAA+B,IAE/DM,EAAe,SAAClD,GAAD,OAAcmD,OAAOC,OAAOpD,GAAK2C,QAAO,SAACC,GAAD,IAAcS,EAAd,uDAAmB,EAAnB,OAAyBT,EAAMS,IAAI,IAIhGd,qBAAU,YACFN,GAAuBG,EAAW,GAClCF,GAAuB,GAGxBD,GAAoC,IAAbG,GACtBkB,GAAa,KAGlB,CAAClB,IAGJ,IAAMkB,EAAe,WAAsC,IAArCC,EAAoC,wDACtD,IAAKA,EAAgB,CACjB,IAAM1D,EAAoB8B,EAAKgB,QAAO,SAACC,EAAejD,GAClD,IAAOlB,EAAQkB,EAARlB,KACP,OAAI+D,EAAiB7C,GACViD,EAEL,GAAN,mBAAWA,GAAX,CAAgBnE,MACjB,IAEH,UAAIoB,QAAJ,IAAIA,OAAJ,EAAIA,EAAmB4C,OAEnB,YADAX,EAAqBjC,GAK7ByC,IACAR,EAAqB,IACrBzB,EAAShB,GAAe,IACxBgB,EAASjB,EAAiBsD,MAC1BV,EAAW,oCAAD,OAA2BkB,EAAaR,KAAxC,eAAiEO,IAAjE,cACVO,OAAOC,SAAS,EAAG,IAGjBtD,EAAmB9B,EAAekB,GAUxC,OACI,gCACI,qBAAKe,UAAWC,YAAK,cAArB,mBAAwCmD,KAAKC,MAAMvB,EAAW,IAAO,IAArE,YAA6EA,EAAW,IAA4C,GAAnCsB,KAAKC,MAAMvB,EAAW,IAAO,OAC9H,qBAAK9B,UAAWC,YAAK,gBAArB,SAAuCwB,IACtCJ,EAAKjB,KAAI,SAAAf,GAAQ,OA1GN,SAACA,GAAD,gCACf7B,EAAgB,cAAC,EAAD,CAAc6B,SAAUA,EAAUE,kBAAmBgC,KADtD,cAEf9D,EAAe,cAAC,EAAD,CAAa4B,SAAUA,EAAUE,kBAAmBgC,KAFpD,cAGf7D,EAAsB,cAAC,EAAD,CAAc2B,SAAUA,EAAUE,kBAAmBgC,EACvCjC,SAAS,KAJ9B,cAKf3B,EAAqB,cAAC,EAAD,CAAa0B,SAAUA,EAAUE,kBAAmBgC,EACvCjC,SAAS,KAN5B,cAOf1B,EAAa,cAAC,EAAD,CAAMyB,SAAUA,EAAUE,kBAAmBgC,KAP3C,EA0GU+B,CAAYjE,GAAUA,EAASsB,SACrD,wBAAQX,UAAWC,YAAK,eAAgBsD,QAbtB,WAClB1D,EACAqD,OAAOM,SAASC,SAEhBT,KASA,SAAuEnD,EAAmC,4BAAhB,qB,MCqDvF6D,MA9Lf,WACI,MAAkCpC,oBAAS,GAA3C,mBAAOqC,EAAP,KAAkBC,EAAlB,KACMvC,EAAuB,CACzB,CACIV,KAAMnD,EACN6B,SAAU,wEACVlB,KAAM,kBACNE,QAAS,CACL,kBACA,kBACA,kBACA,mBAEJqB,IAAK,EACLC,eAAgB,CACZ,IAGd,CACUgB,KAAM/C,EACNyB,SAAU,qDACVlB,KAAM,cACNuB,IAAK,EACLD,YAAa,0JACbE,eAAgB,CACZ,gBACZ,gBACA,gBACA,kBAGF,CACUgB,KAAMnD,EACN6B,SAAU,4CACVlB,KAAM,gBACNE,QAAS,CACL,gDACA,0DAEJqB,IAAK,EACLC,eAAgB,CACZ,IAGR,CACIgB,KAAMlD,EACN4B,SAAU,gDACVlB,KAAM,kBACNE,QAAS,CACL,iBACA,WACA,eAEJqB,IAAK,EACLC,eAAgB,CACZ,EAAE,IAGhB,CACIgB,KAAMnD,EACA6B,SAAU,kFACVlB,KAAM,QACNE,QAAS,CACL,UACZ,WAEQqB,IAAK,EACLD,YAAa,8HACbE,eAAgB,CACZ,IAGd,CACUgB,KAAMnD,EACN6B,SAAU,uEACVlB,KAAM,eACNE,QAAS,CACjB,UACY,UACA,UACA,UAEJqB,IAAK,EACLC,eAAgB,CACZ,IAGR,CACIgB,KAAMjD,EACN2B,SAAU,4CACVlB,KAAM,4BACNE,QAAS,CACL,mJACZ,gHACA,+EACA,mCAEQqB,IAAK,EACLC,eAAgB,CACZ,IAGR,CACIgB,KAAMhD,EACN0B,SAAU,4EACVlB,KAAM,eACNE,QAAS,CACL,sLACZ,+IACA,0GACA,4EAEQqB,IAAK,EACLC,eAAgB,CACZ,EAAE,EAAE,IAGlB,CACIgB,KAAMnD,EACA6B,SAAU,6FACVlB,KAAM,WACNE,QAAS,CACL,UACZ,WAEQqB,IAAK,EACLD,YAAa,wKACbE,eAAgB,CACZ,IAGR,CACIgB,KAAM/C,EACNyB,SAAU,0GACVlB,KAAM,iBACNuB,IAAK,EACLC,eAAgB,CACZ,MACA,QAGR,CACIgB,KAAMnD,EACN6B,SAAU,0EACVlB,KAAM,eACNE,QAAS,CACL,UACA,aACA,OACA,OACA,MACA,SAEJqB,IAAK,EACLD,YAAa,4HACbE,eAAgB,CACZ,IAGR,CACIgB,KAAM/C,EACNyB,SAAU,8FACVlB,KAAM,YACNuB,IAAK,EACLD,YAAa,8CACbE,eAAgB,CACZ,OACZ,OACA,UAIF,OACE,qBAAKK,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACM2D,GAAa,cAAC,EAAD,CAAMtC,KAAMA,KACxBsC,GACH,sBAAK3D,UAAWC,YAAK,oBAArB,UACI,mDACT,yEACS,0EACA,+EDxKM,GCwKN,mBACA,wBAAQD,UAAWC,YAAK,mBAAoBsD,QAAU,kBAAKK,GAAa,IAAxE,sCC1LDC,EAAQC,YAAe,CAClCC,QAAS,CACP9F,KAAM+F,KCOUC,QACW,cAA7Bf,OAAOM,SAASU,UAEe,UAA7BhB,OAAOM,SAASU,UAEhBhB,OAAOM,SAASU,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAMvD,c","file":"static/js/main.c41f1ebe.chunk.js","sourcesContent":["export const SINGLE_SELECT = 'SINGLE_SELECT';\nexport const MULTI_SELECT = 'MULTI_SELECT';\nexport const IMAGE_SINGLE_SELECT = 'IMAGE_SINGLE_SELECT';\nexport const IMAGE_MULTI_SELECT = 'IMAGE_MULTI_SELECT';\nexport const TEXT_FIELD = 'TEXT_FIELD';\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport {RootState} from \"../app/store\";\n\nexport interface QuestionAnswers {\n    [name: string]: number[] | number | string\n}\n\nexport interface quizReducerState {\n    answers: QuestionAnswers\n    showCorrect: boolean\n    correctPoints: QuestionAnswers\n}\n\nconst initialState: quizReducerState = {\n    answers: {},\n    showCorrect: false,\n    correctPoints: {}\n};\n\nexport const quiz = createSlice({\n    name: 'quiz',\n    initialState,\n    reducers: {\n        addAnswer: (state, action: PayloadAction<QuestionAnswers>) => {\n            state.answers = { ...state.answers, ...action.payload }\n        },\n        clearAnswers: (state) => {\n            state.answers = {}\n        },\n        setCorrectPoints: (state, action: PayloadAction<QuestionAnswers>) => {\n            state.correctPoints = action.payload\n        },\n        setShowAnswers: (state, action: PayloadAction<boolean>) => {\n            state.showCorrect = action.payload\n        }\n    },\n});\n\nexport const getAnswers = (state: RootState) => state.quiz.answers;\nexport const getShowAnswers = (state: RootState) => state.quiz.showCorrect;\nexport const getPoints = (state: RootState) => state.quiz.correctPoints;\n\nexport const { addAnswer, clearAnswers, setShowAnswers, setCorrectPoints } = quiz.actions;\n\nexport default quiz.reducer;\n","/* eslint-disable */\nimport {FC} from 'react';\nimport {QuizQuestion} from \"../../../../@types/global\";\nimport {useAppSelector, useAppDispatch} from '../../../../app/hooks';\nimport {getAnswers, addAnswer, getShowAnswers, getPoints} from \"../../../../store/quizReducer\";\nimport parse from 'html-react-parser';\n\nimport clsx from \"clsx\";\nimport './SingleChoice.style.scss';\n\nexport interface SingleChoiceProps {\n    question: QuizQuestion\n    isImage?: boolean\n    incompleteAnswers: string[]\n}\n\nconst SingleChoice: FC<SingleChoiceProps> = ({question, isImage, incompleteAnswers}) => {\n    const text = 'Atzimejiet vienu';\n    const {question: quizQuestion, description = '', pts, answers = [], name, correctAnswers} = question;\n    const storeAnswer = useAppSelector(getAnswers)?.[name];\n    const submittedAnswers = useAppSelector(getShowAnswers);\n    const points = useAppSelector(getPoints)\n    const dispatch = useAppDispatch();\n\n    return (\n        <div className={clsx('SingleChoice-Wrapper', incompleteAnswers.includes(name) && 'SingleChoice-Wrapper_isRed')}>\n            <div className={clsx('SingleChoice-QuestionTitle')}>{quizQuestion}</div>\n            <div className={clsx('SingleChoice-Pts')}>{ submittedAnswers ? `${points?.[name]}/${pts} punkti` : `${pts} punkti`}</div>\n            <div>{ text }</div>\n            <div className={clsx('SingleChoice-Description')}>{parse(description)}</div>\n            <div className={clsx('SingleChoice-AnswersWrapper', isImage && 'SingleChoice-AnswersWrapper_isImage')}>{\n                (answers as any[]).map((answer: string, idx: number) => (\n                    /* @ts-ignore */\n                    <div className={clsx('SingleChoice-Answer', isImage && 'SingleChoice-Answer_isImage', submittedAnswers && correctAnswers.includes(idx) && 'SingleChoice-Answer_isGreen', storeAnswer === idx && submittedAnswers && !correctAnswers.includes(idx) && 'SingleChoice-Answer_isRed' )}>\n                        <input id={`${name}${answer}${idx}`}\n                               name={quizQuestion}\n                               checked={storeAnswer === idx}\n                               disabled={ submittedAnswers }\n                               onChange={() => dispatch(addAnswer({[name]: idx}))}\n                               type='radio'/>\n                        <label\n                            htmlFor={`${name}${answer}${idx}`}>{isImage ? <img\n                            className={clsx('SingleChoice-Label', storeAnswer === idx && isImage && 'SingleChoice-Label_isSelected')}\n                            src={answer}/> : answer}</label></div>))\n            }</div>\n        </div>\n    )\n}\n\nexport default SingleChoice;\n","/* eslint-disable */\nimport {FC} from 'react';\nimport {QuizQuestion} from \"../../../../@types/global\";\nimport {useAppSelector, useAppDispatch} from '../../../../app/hooks';\nimport {getAnswers, addAnswer, getShowAnswers, getPoints} from \"../../../../store/quizReducer\";\nimport parse from 'html-react-parser';\n\nimport clsx from \"clsx\";\nimport './MultiChoice.style.scss';\n\nexport interface MultiChoiceProps {\n    question: QuizQuestion\n    isImage?: boolean\n    incompleteAnswers: string[]\n}\n\nconst MultiChoice: FC<MultiChoiceProps> = ({question, isImage, incompleteAnswers}) => {\n    const text = 'Atzimejiet vienu vai vairakas';\n    const {question: quizQuestion, description = '', pts, answers = [], name, correctAnswers} = question;\n    const storeAnswer = useAppSelector(getAnswers)?.[name] as number[] || [];\n    const submittedAnswers = useAppSelector(getShowAnswers);\n    const points = useAppSelector(getPoints)\n    const dispatch = useAppDispatch();\n\n    const onChange = (name: string, idx: number, checked: boolean) => {\n        if (checked) {\n            dispatch(addAnswer({[name]: [...storeAnswer, idx]}));\n        } else {\n            dispatch(addAnswer({\n                [name]: storeAnswer.filter(e => e !== idx)\n            }));\n        }\n    }\n\n    return (\n        <div className={clsx('MultiChoice-Wrapper', incompleteAnswers.includes(name) && 'MultiChoice-Wrapper_isRed')}>\n            <div className={clsx('MultiChoice-QuestionTitle')}>{quizQuestion}</div>\n            <div className={clsx('MultiChoice-Pts')}>{ submittedAnswers ? `${points?.[name]}/${pts} punkti` : `${pts} punkti`}</div>\n            <div>{ text }</div>\n            <div className={clsx('MultiChoice-Description')}>{parse(description)}</div>\n            <div className={clsx('MultiChoice-AnswersWrapper', isImage && 'MultiChoice-AnswersWrapper_isImage')}>{\n                (answers as any[]).map((answer: string, idx: number) => (\n                    /* @ts-ignore */\n                    <div className={clsx('MultiChoice-Answer', isImage && 'MultiChoice-Answer_isImage', submittedAnswers && correctAnswers.includes(idx) && 'SingleChoice-Answer_isGreen', storeAnswer.includes(idx) && submittedAnswers && !correctAnswers.includes(idx) && 'SingleChoice-Answer_isRed')}><input id={`${name}${answer}${idx}`}\n                                                                       name={quizQuestion}\n                                                                       checked={storeAnswer.includes(idx)}\n                                                                                                                disabled={submittedAnswers}\n                                                                       onChange={({currentTarget: {checked}}) => onChange(name, idx, checked)}\n                                                                       type='checkbox'/><label\n                        htmlFor={`${name}${answer}${idx}`}>{isImage ? <img\n                        className={clsx('MultiChoice-Label', storeAnswer.includes(idx) && isImage && 'MultiChoice-Label_isSelected')}\n                        src={answer}/> : answer}</label></div>))\n            }</div>\n        </div>\n    )\n}\n\nexport default MultiChoice;\n","import {FC} from 'react';\nimport {QuizQuestion} from \"../../../../@types/global\";\nimport {useAppSelector, useAppDispatch} from '../../../../app/hooks';\nimport {getAnswers, addAnswer, getShowAnswers, getPoints} from \"../../../../store/quizReducer\";\nimport parse from 'html-react-parser';\n\nimport clsx from \"clsx\";\nimport './Text.style.scss';\n\nexport interface TextProps {\n    question: QuizQuestion\n    isArea?: boolean\n    incompleteAnswers: string[]\n}\n\nconst Text: FC<TextProps> = ({question, incompleteAnswers}) => {\n    const text = 'Ierakstat atbildu';\n    const {question: quizQuestion, description = '', pts, name, correctAnswers} = question;\n    const storeAnswer = useAppSelector(getAnswers)?.[name] as string || '';\n    const submittedAnswers = useAppSelector(getShowAnswers);\n    const points = useAppSelector(getPoints)\n    const dispatch = useAppDispatch();\n\n    return (\n        <div className={clsx('Text-Wrapper', incompleteAnswers.includes(name) && 'Text-Wrapper_isRed')}>\n            <div className={clsx('Text-QuestionTitle')}>{quizQuestion}</div>\n            <div className={clsx('Text-Pts')}>{ submittedAnswers ? `${points?.[name]}/${pts} punkti` : `${pts} punkti`}</div>\n            <div>{ text }</div>\n            <div className={clsx('Text-Description')}>{parse(description)}</div>\n            { /* @ts-ignore */ }\n            <div className={clsx('Text-AnswersWrapper', (correctAnswers.includes(storeAnswer) && submittedAnswers ? 'Text-AnswersWrapper_isGreen' : 'Text-AnswersWrapper_isRed'))}>\n                <input type='text' value={storeAnswer} disabled={submittedAnswers} onChange={({ currentTarget: { value } }) => dispatch(addAnswer({[name]: value}))}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Text;\n","import {FC, useState, useEffect} from 'react';\nimport {QuizQuestion} from \"../../@types/global\";\nimport {IMAGE_MULTI_SELECT, IMAGE_SINGLE_SELECT, MULTI_SELECT, SINGLE_SELECT, TEXT_FIELD} from \"../../consts\";\nimport SingleChoice from \"./parts/SingleChoice/SingleChoice\";\nimport MultiChoice from \"./parts/MultiChoice/MultiChoice\";\nimport Text from \"./parts/Text/Text\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {getAnswers, setShowAnswers, setCorrectPoints, getShowAnswers} from \"../../store/quizReducer\";\nimport clsx from \"clsx\";\nimport useCountDown from 'react-countdown-hook';\nimport './Quiz.style.scss';\n\nexport interface QuizProps {\n    data: QuizQuestion[]\n}\n\nexport interface declarationType {\n    [name: string]: JSX.Element\n}\n\nexport const TIME = 15; //laiks minutes\n\nconst Quiz: FC<QuizProps> = ({data}) => {\n    const [stateIncompleteAnswers, setIncompleteAnswers] = useState<string[]>([]);\n    const [message, setMessage] = useState<string>('');\n    const [hasTimerBeenStarted, setHasTimerBeenStarted] = useState<boolean>(false);\n\n    const initialTime = 1000 * 60 * TIME;\n    const interval = 1000;\n\n    const [timeLeft, {start, pause}] = useCountDown(initialTime, interval);\n\n    useEffect(() => {\n        start();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const declaration = (question: QuizQuestion): declarationType => ({\n        [SINGLE_SELECT]: <SingleChoice question={question} incompleteAnswers={stateIncompleteAnswers}/>,\n        [MULTI_SELECT]: <MultiChoice question={question} incompleteAnswers={stateIncompleteAnswers}/>,\n        [IMAGE_SINGLE_SELECT]: <SingleChoice question={question} incompleteAnswers={stateIncompleteAnswers}\n                                             isImage={true}/>,\n        [IMAGE_MULTI_SELECT]: <MultiChoice question={question} incompleteAnswers={stateIncompleteAnswers}\n                                           isImage={true}/>,\n        [TEXT_FIELD]: <Text question={question} incompleteAnswers={stateIncompleteAnswers}/>\n    });\n\n    const storeAnswer = useAppSelector(getAnswers);\n    const dispatch = useAppDispatch();\n\n    const validateQuestion = (question: QuizQuestion): boolean => {\n        const {type, name} = question;\n\n        if ((type === SINGLE_SELECT || type === IMAGE_SINGLE_SELECT) && (storeAnswer?.[name] || storeAnswer?.[name] === 0)) {\n            return true;\n        }\n\n        if ((type === MULTI_SELECT || type === IMAGE_MULTI_SELECT) && storeAnswer?.[name] && (storeAnswer?.[name] as [])?.length) {\n            return true;\n        }\n\n        return !!(type === TEXT_FIELD && storeAnswer?.[name]);\n    }\n\n    const calculatePoints = () =>\n        data.reduce((acc: any, question) => {\n            const {type, correctAnswers, pts = 0, name} = question;\n            if ((type === SINGLE_SELECT || type === IMAGE_SINGLE_SELECT)) {\n                // @ts-ignore\n                return {...acc, [name]: correctAnswers.includes(storeAnswer?.[name]) ? pts : 0};\n            }\n\n            if ((type === MULTI_SELECT || type === IMAGE_MULTI_SELECT)) {\n                const ptForAnswer = pts / correctAnswers.length;\n                const correctAnswersPts = (storeAnswer?.[name] as [] || []).reduce((acc, val) => correctAnswers.includes(val) ? acc + ptForAnswer : acc, 0)\n                const incorrectAnswersPts = (storeAnswer?.[name] as [] || []).reduce((acc, val) => !correctAnswers.includes(val) ? acc + ptForAnswer : acc, 0)\n\n                return {...acc, [name]: correctAnswersPts - incorrectAnswersPts};\n            }\n\n            if (type === TEXT_FIELD) {\n                // @ts-ignore\n                return {...acc, [name]: correctAnswers.includes(storeAnswer?.[name]) ? pts : 0}\n            }\n            return acc\n        }, {});\n\n    const totalPoints = () => data.reduce((acc, {pts = 0}) => acc + pts, 0)\n    // @ts-ignore\n    const gottenPoints = (pts: any) => Object.values(pts).reduce((acc: number, pt = 0) => acc + pt, 0);\n\n\n\n    useEffect(() => {\n        if(!hasTimerBeenStarted && timeLeft > 0) {\n            setHasTimerBeenStarted(true);\n        }\n\n        if(hasTimerBeenStarted && timeLeft === 0) {\n            validateTest(true);\n        }\n// eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [timeLeft]);\n\n\n    const validateTest = (skipIncomplete: boolean = false) => {\n        if (!skipIncomplete) {\n            const incompleteAnswers = data.reduce((acc: string[], question) => {\n                const {name} = question;\n                if (validateQuestion(question)) {\n                    return acc;\n                }\n                return [...acc, name];\n            }, [])\n\n            if (incompleteAnswers?.length) {\n                setIncompleteAnswers(incompleteAnswers);\n                return;\n            }\n        }\n\n        pause()\n        setIncompleteAnswers([])\n        dispatch(setShowAnswers(true));\n        dispatch(setCorrectPoints(calculatePoints()))\n        setMessage(`Apsveicam, Jūs ieguvāt ${gottenPoints(calculatePoints())} no ${totalPoints()} punktiem`)\n        window.scrollTo(0, 0);\n    }\n\n    const submittedAnswers = useAppSelector(getShowAnswers);\n\n    const onQuizButtonClick = () => {\n        if (submittedAnswers) {\n            window.location.reload();\n        } else {\n            validateTest();\n        }\n    }\n\n    return (\n        <div>\n            <div className={clsx('Quiz-Timer')}>{`${Math.floor(timeLeft / 1000 / 60)}:${(timeLeft / 1000) - (Math.floor(timeLeft / 1000 / 60) * 60)}`}</div>\n            <div className={clsx('Quiz-Message')}>{message}</div>\n            {data.map(question => declaration(question)[question.type])}\n            <button className={clsx('Quiz-Button')} onClick={onQuizButtonClick}>{ !submittedAnswers ? 'NODOT TESTU' : 'SĀKT TESTU NO JAUNA?'}</button>\n        </div>\n    )\n}\n\nexport default Quiz;\n","import {useState} from 'react';\nimport Quiz, {TIME} from \"./components/Quiz/Quiz\";\nimport './App.style.scss';\nimport {QuizQuestion} from \"./@types/global\";\nimport {IMAGE_MULTI_SELECT, IMAGE_SINGLE_SELECT, MULTI_SELECT, SINGLE_SELECT, TEXT_FIELD} from \"./consts\";\nimport clsx from \"clsx\";\n\nfunction App() {\n    const [startTest, setStartTest] = useState(false);\n    const data: QuizQuestion[] = [\n        {\n            type: SINGLE_SELECT,\n            question: 'Kurā gādā tika tika dibināta Audi kompānija?',\n            name: 'audi_dibinasana', // katram jautajumam sim jabut ir unikalam, pec taa tiek viss skatits\n            answers: [\n                '1909. gadā',\n                '1910. gadā',\n                '1903. gadā',\n                '1901. gadā'\n            ],\n            pts: 1,\n            correctAnswers: [\n                0\n            ]\n        },\n\t\t{\n            type: TEXT_FIELD,\n            question: 'Kā sauc Ford kompānijas dibinātaju?',\n            name: 'ford_dibina',\n            pts: 5,\n            description: \"Pirmā kompānija, kura uzsāka izmantot klasisko autoražotnes konveijeru, lai atvieglotu ražošanu, palielinātu apjomus\",\n            correctAnswers: [\n                'Henrijs Fords',\n\t\t\t\t'henrijs fords',\n\t\t\t\t'Fords Henrijs',\n\t\t\t\t'fords henrijs'\n            ]\n        },\n\t\t{\n            type: SINGLE_SELECT,\n            question: 'Ko nozīmē abriviatūra ABS?',\n            name: 'abs_jautajums', // katram jautajumam sim jabut ir unikalam, pec taa tiek viss skatits\n            answers: [\n                'Bremžu blokēšanas sistēma',\n                'Bremžu pretbloķēšanas sistēma'\n            ],\n            pts: 1,\n            correctAnswers: [\n                1\n            ]\n        },\n        {\n            type: MULTI_SELECT,\n            question: 'Kā var tikt mērīta auto jauda?',\n            name: 'jaudas_merisana',\n            answers: [\n                'Zigrspēki',\n                'Kilovati',\n                'Ampēri'\n            ],\n            pts: 2,\n            correctAnswers: [\n                0,1\n            ]\n        },\n\t\t{\n\t\t    type: SINGLE_SELECT,\n            question: 'Vai Benz Patent-Motorwagen bija pirmā praktiskā automašīna?',\n            name: 'benzo',\n            answers: [\n                'Jā',\n\t\t\t\t'Nē'\n            ],\n            pts: 1,\n            description: \"<img src=https://res.cloudinary.com/dk-find-out/image/upload/q_80,w_640,f_auto/MA_00486523_fuwriq.jpg width=640 height=435>\",\n            correctAnswers: [\n                0\n            ]\n        },\n\t\t{\n            type: SINGLE_SELECT,\n            question: 'Cik ātri varēja braukt ar pirmo praktisko automobīli?',\n            name: 'first_carins',\n            answers: [\n\t\t\t\t'16 km/h',\n                '50 km/h',\n                '10 km/h',\n                '5 km/h'\n            ],\n            pts: 2,\n            correctAnswers: [\n                2\n            ]\n        },\n        {\n            type: IMAGE_SINGLE_SELECT,\n            question: 'Atzīmējiet Volkswagen logotipu!',\n            name: 'taksometru_masinas_bildes',\n            answers: [\n                'https://audimediacenter-a.akamaihd.net/system/production/media/1282/images/bde751ee18fe149036c6b47d7595f6784f8901f8/AL090142_full.jpg?1581961854',\n\t\t\t\t'https://www.volkswagen.lv/idhub/etc/clientlibs/vwa-ngw18/ngw18-frontend/clientlibs/statics/img/vw-logo-2x.png',\n\t\t\t\t'https://i.pinimg.com/originals/6e/de/9a/6ede9a835035ba5d9d43c510e63cfb5d.jpg',\n\t\t\t\t'https://i.imgur.com/nd3BX9W.jpg'\n            ],\n            pts: 1,\n            correctAnswers: [\n                1\n            ]\n        },\n        {\n            type: IMAGE_MULTI_SELECT,\n            question: 'Atzīmējat visas sarkanas mašīnas, ko Jūs redzat!',\n            name: 'sarkani_auto',\n            answers: [\n                'https://carsguide-res.cloudinary.com/image/upload/f_auto,fl_lossy,q_auto,t_cg_hero_large/v1/editorial/story/hero_image/2019-Porsche-911-coupe-red-press-image-1001x565p-%281%29.jpg',\n\t\t\t\t'https://images.unsplash.com/photo-1552519507-da3b142c6e3d?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8Y2Fyc3xlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&w=1000&q=80',\n\t\t\t\t'https://cdn1.buyacar.co.uk/sites/buyacar/files/styles/w860/public/vauxhall-corsa20-11.jpg?itok=NKrpS1jU',\n\t\t\t\t'https://cdn.motor1.com/images/mgl/AovXy/s3/ferrari-laferrari-aperta.webp'\n\t\t\t],\n            pts: 3,\n            correctAnswers: [\n                0,2,3\n            ]\n        },\n\t\t{\n\t\t    type: SINGLE_SELECT,\n            question: 'Vai attēlā redzamā mašīna bija pirmā, kura spēja lidot?',\n            name: 'lidojosa',\n            answers: [\n                'Jā',\n\t\t\t\t'Nē'\n            ],\n            pts: 1,\n            description: \"<img src=https://res.cloudinary.com/dk-find-out/image/upload/q_80,w_640,f_auto/Icon_A-Terrafugia-March10_2012-243-FrontDriving8x10WM_fvgews.jpg width=256 height=256>\",\n            correctAnswers: [\n                0\n            ]\n        },\n        {\n            type: TEXT_FIELD,\n            question: 'Cik ātri pasaules ātrākā mašīna Koenigsegg Agera R var sasniegt 100 km/h?',\n            name: 'motora_tilpums',\n            pts: 5,\n            correctAnswers: [\n                '2.9',\n                '2,9'\n            ]\n        },\n        {\n            type: SINGLE_SELECT,\n            question: 'Kādas auto firmas logotips ir attēlots āttēlā?',\n            name: 'masinas_logo',\n            answers: [\n                'Renault',\n                'Volkswagen',\n                'Ford',\n                'Audi',\n                'BMW',\n                'Dacia'\n            ],\n            pts: 1,\n            description: \"<img src=https://i2.wp.com/thinkmarketingmagazine.com/wp-content/uploads/2012/08/bmw-logo.png?ssl=1 width=128 height=128>\",\n            correctAnswers: [\n                4\n            ]\n        },\n        {\n            type: TEXT_FIELD,\n            question: 'Nosauciet kompāniju / brendu, kuram logotips ir 4 pārklājoši apļi?',\n            name: 'audi_logo',\n            pts: 4,\n            description: \"Ļoti populāra auto kompānija\",\n            correctAnswers: [\n                'Audi',\n\t\t\t\t'AUDI',\n\t\t\t\t'audi'\n            ]\n        },\n    ]\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          { startTest && <Quiz data={data} /> }\n          { !startTest &&\n          <div className={clsx('App-Introduction')}>\n              <div>Sveicināti!</div>\n\t\t\t  <div>Testa tēma: automašīnas</div>\n              <div>Test sastāv no 20 jautājumiem</div>\n              <div>{`Laika ierobežojums uz visu testu: ${TIME} minūtes`}</div>\n              <button className={clsx('App-StartButton')} onClick={ ()=> setStartTest(true) }>Sākt testu</button>\n          </div>\n          }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport quizReducer from \"../store/quizReducer\";\n\nexport const store = configureStore({\n  reducer: {\n    quiz: quizReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}